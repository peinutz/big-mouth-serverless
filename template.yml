AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 'SAM template for Serverless framework service: '
Resources:
  restaurantTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: restaurants
      AttributeDefinitions:
        - AttributeName: name
          AttributeType: S
      KeySchema:
        - AttributeName: name
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  GetIndex:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: functions/get-index.handler
      Runtime: nodejs8.10
      CodeUri: >-
        C:\Users\Pedro\Desktop\serv\big-mouth-serverless\.serverless\big-mouth.zip
      MemorySize: 128
      Timeout: 3
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:scan'
              Resource: >-
                arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/restaurants
            - Effect: Allow
              Action:
                - 'execute-api:Invoke'
              Resource: >-
                arn:aws:execute-api:#{AWS::Region}:#{AWS::AccountId}:*/*/GET/restaurants
      Environment:
        Variables:
          restaurants_api: >-
            https://qydsc31ue5.execute-api.us-east-1.amazonaws.com/dev/restaurants
          cognito_user_pool_id: us-east-1_gjBnaWfuj
          cognito_client_id: 6ncstur64s462sdeon15eurpa3
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId:
              Ref: BigMouth
  BigMouth:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: dev
      DefinitionBody:
        swagger: '2.0'
        info:
          title:
            Ref: 'AWS::StackName'
        paths:
          /:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetIndex.Arn}/invocations
              responses: {}
          /restaurants/:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetReastaurants.Arn}/invocations
              responses: {}
          /restaurants/search:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchRestaurant.Arn}/invocations
              responses: {}
  GetIndexLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - GetIndex
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: GetIndex
      Principal: apigateway.amazonaws.com
  GetReastaurants:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: functions/get-restaurants.handler
      Runtime: nodejs8.10
      CodeUri: >-
        C:\Users\Pedro\Desktop\serv\big-mouth-serverless\.serverless\big-mouth.zip
      MemorySize: 128
      Timeout: 3
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:scan'
              Resource: >-
                arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/restaurants
            - Effect: Allow
              Action:
                - 'execute-api:Invoke'
              Resource: >-
                arn:aws:execute-api:#{AWS::Region}:#{AWS::AccountId}:*/*/GET/restaurants
      Environment:
        Variables:
          restaurants_table: restaurants
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /restaurants/
            Method: get
            RestApiId:
              Ref: BigMouth
  GetReastaurantsLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - GetReastaurants
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: GetReastaurants
      Principal: apigateway.amazonaws.com
  SearchRestaurant:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: functions/search-restaurants.handler
      Runtime: nodejs8.10
      CodeUri: >-
        C:\Users\Pedro\Desktop\serv\big-mouth-serverless\.serverless\big-mouth.zip
      MemorySize: 128
      Timeout: 3
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'dynamodb:scan'
              Resource: >-
                arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/restaurants
            - Effect: Allow
              Action:
                - 'execute-api:Invoke'
              Resource: >-
                arn:aws:execute-api:#{AWS::Region}:#{AWS::AccountId}:*/*/GET/restaurants
      Environment:
        Variables:
          restaurants_table: restaurants
      Events:
        Event1:
          Type: Api
          Properties:
            Path: /restaurants/search
            Method: post
            RestApiId:
              Ref: BigMouth
  SearchRestaurantLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
      - SearchRestaurant
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: SearchRestaurant
      Principal: apigateway.amazonaws.com
